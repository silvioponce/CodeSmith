<%-- 
Name: BusinessObject.cst
Author: Tom DuPont
Description: Generates a very simple business object.
--%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Description="Generates a very simple business object." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="SingleFileMode" Type="System.Boolean" Category="Options" Default="True" Description="Generate content for a complete cs file instead of just a class." %>
<%@ Property Name="NameSpace" Type="System.Boolean" Category="Options" Default="false" Description="Generate content for a complete cs file instead of just a class." %>
<%@ Property Name="ClassNamespace" Type="System.String" Category="Options" Default="BusinessObjects" Description="Namespace your class is in. Only used if SingleFileMode is true!" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Map Name="DbDataReader" Src="DbType-DataReaderMethod" Description="DbType to DataReader Method Map" %>
<%@ Map Name="SqlNativeSqlDb" Src="SqlNativeType-SqlDbType" Description="SqlNativeType to SqlDbType Map" %>
<% If Me.SingleFileMode Then %>
Imports System
Imports System.Collections.Generic
Imports System.Text
Imports System.Web.HttpContext

<% If Me.NameSpace Then %>

<% End If %>
<% End If %>

Public Class <%= GetClassName(SourceTable) %>

#Region " Variables Miembros " 
	Private _<%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns(0).Name.ToString()) %> As <%= GetPrimaryKeyType(SourceTable) %>
	<% For Each column As  ColumnSchema In SourceTable.NonPrimaryKeyColumns %>
	<%= GetMemberVariableDeclarationStatement(column) %>
	<% Next %>
#End Region
        
#Region "Public Properties"
    Public Property <%= SourceTable.PrimaryKey.MemberColumns(0).Name.ToString() %>() As  <%= GetPrimaryKeyType(SourceTable) %>
        Get
            Return _<%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns(0).Name.ToString()) %>
        End Get
		Set(ByVal value As <%= GetPrimaryKeyType(SourceTable) %>)
            _<%= GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns(0).Name) %> = value
        End Set
    End Property
	
	<% For i As Integer = 0 To SourceTable.NonPrimaryKeyColumns.Count - 1 %>
	Public Property <%= GetPropertyName(SourceTable.NonPrimaryKeyColumns(i)) %>() As <%= SourceTable.NonPrimaryKeyColumns(i).SystemType %>
        Get
            Return <%= GetMemberVariableName(SourceTable.NonPrimaryKeyColumns(i)) %>
        End Get
        Set(ByVal value As <%= SourceTable.NonPrimaryKeyColumns(i).SystemType %>)
            <%= GetMemberVariableName(SourceTable.NonPrimaryKeyColumns(i)) %> = value
        End Set
    End Property
	
	<% Next i %>
#End Region

#Region "Other Properties"
    Public Property dt<%= GetClassName(SourceTable) %>() As Data.DataTable
        Get
            Return (Current.Session("dt<%= GetClassName(SourceTable) %>"))
        End Get
        Set(ByVal Value As Data.DataTable)
            Current.Session("dt<%= GetClassName(SourceTable) %>") = Nothing
            Current.Session("dt<%= GetClassName(SourceTable) %>") = Value
        End Set
    End Property
#End Region

End Class

<% If Me.SingleFileMode Then %>
<% If Me.NameSpace Then %>

<% End If %>
<% End If %>

<script runat="template">

Public Function GetMemberVariableDeclarationStatement(ByVal column As ColumnSchema) As String
	Return GetMemberVariableDeclarationStatement("Private", column)
End Function

Public Function GetMemberVariableDeclarationStatement(ByVal protectionLevel As String, ByVal column As ColumnSchema) As String
	Dim statement As String = protectionLevel + " Dim "
	statement += GetMemberVariableName(column) + " As " + column.SystemType.ToString()

	Dim defaultValue As String = GetMemberVariableDefaultValue(column)
	If defaultValue <> "" Then
		statement += " = " + defaultValue
	End If

	Return statement
End Function

Public Function GetCamelCaseName(ByVal value As String) As String
	Return value.Substring(0, 1).ToLower() + value.Substring(1)
End Function

Public Function GetMemberVariableName(ByVal column As ColumnSchema) As String
	Dim propertyName As String = GetPropertyName(column)
	Dim memberVariableName As String = "_" + GetCamelCaseName(propertyName)

	Return memberVariableName
End Function

Public Function GetPropertyName(ByVal column As ColumnSchema) As String
	Dim propertyName As String = column.Name

	If propertyName = column.Table.Name + "Name" Then
		Return "Name"
	End If
	If propertyName = column.Table.Name + "Description" Then
		Return "Description"
	End If

	If propertyName.EndsWith("TypeCode") Then
		propertyName = propertyName.Substring(0, propertyName.Length - 4)
	End If

	Return propertyName
End Function

Public Function GetMemberVariableDefaultValue(ByVal column As ColumnSchema) As String
	Select Case column.DataType
		Case DbType.Guid
			Return "Guid.Empty"
		Case DbType.AnsiString, DbType.AnsiStringFixedLength, DbType.[String], DbType.StringFixedLength
			Return "String.Empty"
		Case Else
			Return ""
	End Select
End Function

Public Function GetReaderMethod(ByVal column As ColumnSchema) As String
	Return DbDataReader(column.DataType.ToString())
End Function

Public Function GetClassName(ByVal table As TableSchema) As String
	If table.Name.EndsWith("s") Then
		Return table.Name.Substring(0, table.Name.Length - 1)
	Else
		Return table.Name
	End If
End Function

Public Function GetSqlDbType(ByVal column As ColumnSchema) As String
	Return SqlNativeSqlDb(column.NativeType.ToString())
End Function

Public Function GetPrimaryKeyType(ByVal table As TableSchema) As String
	If Not IsNothing(table.PrimaryKey) Then
		If table.PrimaryKey.MemberColumns.Count = 1 Then
			Return table.PrimaryKey.MemberColumns(0).SystemType.ToString()
		Else
			Throw New ApplicationException("This template will not work on primary keys with more than one member column.")
		End If
	Else
		Throw New ApplicationException("This template will only work on tables with a primary key.")
	End If
End Function

Public Overloads Overrides Function GetFileName() As String
	Return Me.GetClassName(Me.SourceTable) + ".vb"
End Function

</script>