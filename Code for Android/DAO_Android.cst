<%@ Template Language="VB" TargetLanguage="Java"%>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on."%>

<%@ Property Name="Package" Default="SomeValue" Type="System.String" %>
<%@ Property Name="SampleBooleanProperty" Default="True" Type="System.Boolean" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Map Name="SqlCSharp" Src="Sql-CSharp" Description="System to C# Type Map" %>
<%@ Map Name="DbDataReader" Src="DbType-DataReaderMethod" Description="DbType to DataReader Method Map" %>
<%@ Map Name="SqlNativeSqlDb" Src="SqlNativeType-SqlDbType" Description="SqlNativeType to SqlDbType Map" %>
<%@ Map Name="DbTypeCSharp" Src="DbType-CSharp" Description="DbType to CSharp Map" %>

package <%= Package %>;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

import java.util.ArrayList;
import java.util.List;

import Entidades.Departamento;
import Util.SQLiteHelper;

public class <%= GetClassName(SourceTable) %>Dao {

    public static List<<%= GetClassName(SourceTable) %>> getAll<%= SourceTable.Name %>(Context context)
    {
        String[] parametro = { String.valueOf(1) };
        List<<%= GetClassName(SourceTable) %>> list = new ArrayList<<%= GetClassName(SourceTable) %>>();
        SQLiteDatabase myDataBase = null;
        SQLiteHelper myDbHelper = new SQLiteHelper(context);
        try
        {
            myDbHelper.openDataBase();
            myDataBase = myDbHelper.getReadableDatabase();
            Cursor c = myDataBase.query("<%= GetClassName(SourceTable) %>", null, null , parametro,
                    null, null, null);
            if (c.getCount() > 0)
            {
                c.moveToFirst();
                while (!c.isAfterLast())
                {
                    <%= GetClassName(SourceTable) %> tmp = new <%= GetClassName(SourceTable) %>();
                    
                    <% For Each column As  ColumnSchema In SourceTable.Columns %>
                    <% = GetAsignacionSet(column) %>
                    <% Next %>
    
                    tmp.setIdDepartamento(c.getInt(0));
                    tmp.setNomDepartamento(c.getString(1));

                    list.add(tmp);
                    c.moveToNext();
                }
            } /*
		 *
		 * else { // throws exeptions }
		 */
        }
        catch (Exception e)
        {
        }
        finally
        {
            if (myDataBase != null)
                myDataBase.close();
            myDbHelper.close();
        }
        return list;
    }

}

<script runat="template">
    Dim contadorForeignKeys as Integer = 0
    
    Public Function GetClassName(ByVal table As TableSchema) As String
    	Return GetNameSingle(table.Name)
    End Function

    Public Function GetNameSingle(ByVal name As String) As String

        If name.EndsWith("es") Then
            Return name.Substring(0, name.Length - 2)
        End If
            
        If name.EndsWith("s") Then
            Return name.Substring(0, name.Length - 1)
        End If
        
        Return name
        
    End Function
    
    Public Function GetAsignacionSet(ByVal column As ColumnSchema) As String
        Dim Resultado as String
        If column.IsForeignKeyMember Then
            Resultado = "private " + GetClassName(SourceTable.ForeignKeys(contadorForeignKeys).PrimaryKeyTable) + " " + GetClassName(SourceTable.ForeignKeys(contadorForeignKeys).PrimaryKeyTable)
            contadorForeignKeys = contadorForeignKeys + 1
        Else
            Resultado = "tmp.set" + column.Name + "(" + GetSqlDbType(column.    ) + ".valueOf(c.getString(c.getColumnIndex(""" + column.Name + """))))"
        End If
    	Return Resultado + ";"
    End Function
    
    Public Function GetSqlDbType(nativeType As String) As String
	Dim lowerCaseNativeType As String = nativeType.Trim().ToLower()
	Select Case lowerCaseNativeType
		Case "bigint"
			Return "BigInt"
		Case "binary"
			Return "Binary"
		Case "bit"
			Return "Boolean"
		Case "char"
			Return "String"
		Case "datetime"
			Return "Timestamp"
		Case "decimal"
			Return "Float"
		Case "float"
			Return "Float"
		Case "image"
			Return "Image"
		Case "int"
			Return "Integer"
		Case "money"
			Return "Float"
		Case "nchar"
			Return "String"
		Case "ntext"
			Return "String"
		Case "numeric"
			Return "Float"
		Case "nvarchar"
			Return "String"
		Case "real"
			Return "Float"
		Case "smalldatetime"
			Return "Date"
		Case "smallint"
			Return "short"
		Case "smallmoney"
			Return "Float"
		Case "sql_variant"
			Return "Variant"
		Case "sysname"
			Return "String"
		Case "text"
			Return "String"
		Case "timestamp"
			Return "Timestamp"
		Case "tinyint"
			Return "short"
		Case "uniqueidentifier"
			Return "UniqueIdentifier"
		Case "varbinary"
			Return "VarBinary"
		Case "varchar"
			Return "String"
		Case "xml"
			Return "Xml"
		Case Else
			Return nativeType
	End Select
End Function

</script>